# -*- coding: utf-8 -*-
"""TIAT1_RL_MAE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pDgwsg4hilOlKX8bzObL39VLgI0tKs1Q

# MAE
"""

import numpy as np
import matplotlib.pyplot as plt

x_ds = [i for i in range(50)]
y_ds = [ i + np.random.normal(0,3) for i in x_ds ]
plt.plot(x_ds,y_ds, '*')

"""$h(x_i) = w_0 + w_1x_i$"""

def h(x,w):
  return w[0] + w[1]*x

w = np.random.rand(2)
print(w)
plt.plot(x_ds,y_ds, '*')
plt.plot(x_ds,[h(i,w) for i in x_ds])

"""MAE: Minimun Absolute Error

$Error =  \frac{1}{n}\sum_{i=0}|y_i - h(x_i)|$
"""

def ErrorMAE(y,x,w):
 return sum([abs(e[0] - h(e[1],w)) for  e in zip(y,x) ])/(len(y))

print("Error MAE :" + str(ErrorMAE(y_ds, x_ds,w)))

"""Calcular las derivadas 

$Error =  \frac{1}{n}\sum_{i=0}|y_i - h(x_i)|$

$\frac{ \partial Error}{\partial w_0}  = \frac{1}{n}\sum_{i=0}\frac{y_i - h(x_i)}{|y_i - h(x_i)|} * -1 $

$\frac{ \partial Error}{\partial w_1}  = \frac{1}{n}\sum_{i=0}\frac{y_i - h(x_i)}{|y_i - h(x_i)|}* -(x) $
"""

def gradMAE(y,x,w):
  grad_w0 = sum([ (e[0] - h(e[1],w))/abs(e[0] - h(e[1],w)) *(-1) for e in zip(y,x) ])/len(y)
  grad_w1 = sum([ (e[0] - h(e[1],w))/abs(e[0] - h(e[1],w)) *(-e[1]) for e in zip(y,x) ])/len(y)
  return grad_w0, grad_w1

def train(x_ds, y_ds, w, epochs, alpha):
  list_error = []
  time = []
  for i in range(epochs):
    Err = ErrorMAE(y_ds,x_ds,w)
    list_error.append(Err)
    time.append(i)
    grad_w0, grad_w1 = gradMAE(y_ds,x_ds,w)
    w[0] = w[0] - alpha*grad_w0
    w[1] = w[1] - alpha*grad_w1
  return time, list_error

print(w)
t, le = train(x_ds,y_ds, w, 30, 0.0007)
print(w)
plt.plot(t,le)

plt.plot(x_ds,y_ds, '*')
plt.plot(x_ds,[h(i,w) for i in x_ds])